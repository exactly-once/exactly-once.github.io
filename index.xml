<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Exactly Once</title>
    <link>https://exactly-once.github.io/</link>
    <description>Recent content on Exactly Once</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 11 Oct 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://exactly-once.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Consistent state</title>
      <link>https://exactly-once.github.io/posts/consistent-state/</link>
      <pubDate>Fri, 11 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://exactly-once.github.io/posts/consistent-state/</guid>
      <description>In the previous post we talked about exactly-once processing looking at the endpoint from the outside. Here we will re-focus on an individual endpoint and see what exactly-once means for an endpoint&amp;rsquo;s state.
It&amp;rsquo;s not about the execution history Exactly-once spawned some heated debates in the past1 so let&amp;rsquo;s make sure we make it clear what it means in our context - or more importantly what it doesn&amp;rsquo;t. Here we talk about exactly-once processing not delivery, the two being quite different things.</description>
    </item>
    
    <item>
      <title>Sync-async boundary</title>
      <link>https://exactly-once.github.io/posts/sync-async-boundary/</link>
      <pubDate>Thu, 19 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://exactly-once.github.io/posts/sync-async-boundary/</guid>
      <description>If our experience in the IT industry has taught us anything it would be that drawing boundaries is the most important part of the design process. Boundaries are essential for understanding and communicating the design. The sync-async is an example of a boundary that is useful when designing distributed systems.
Purely sync The most popular technology for building synchronous systems is HTTP. Such systems often consist of multiple layers of HTTP endpoints.</description>
    </item>
    
    <item>
      <title>Consistent messaging</title>
      <link>https://exactly-once.github.io/posts/consistent-messaging/</link>
      <pubDate>Wed, 04 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://exactly-once.github.io/posts/consistent-messaging/</guid>
      <description>Modern messaging infrastructures offer delivery guarantees that make it non-trivial to build distributed systems. Robust solutions require a good understanding of what can and can&amp;rsquo;t happen and how that affects business level behavior.
This post looks at the main challenges from the system consistency perspective and sketches possible solutions.
A system We will assume that systems in focus consist of endpoints, each owning a distinct piece of state. Every endpoint processes input messages, modifying internal state and producing output messages.</description>
    </item>
    
  </channel>
</rss>